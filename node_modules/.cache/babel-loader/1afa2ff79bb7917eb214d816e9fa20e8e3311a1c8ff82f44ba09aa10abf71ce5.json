{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sargi\\\\Desktop\\\\Task\\\\TaskRepo\\\\ClientRepo\\\\src\\\\Components\\\\AudioPlayer.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction AudioPlayer() {\n  _s();\n  const [audioUrl, setAudioUrl] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [url, setUrl] = useState(''); // This will be the video URL input by the user.\n\n  useEffect(() => {\n    // Initially, set the audio URL to the GCS file location\n    const initialGcsAudioUrl = 'https://storage.googleapis.com/marcosargiottitask/audio-buffer.mp3';\n    setAudioUrl(initialGcsAudioUrl);\n  }, []);\n  const handleAudioExtraction = async () => {\n    setLoading(true);\n    try {\n      // Assuming you have an input field where users set the `url` state\n      const response = await fetch(`http://localhost:3001/video/audio?url=${encodeURIComponent(url)}`);\n      if (response.ok) {\n        // If the backend successfully processes the audio, update the URL to reflect the change\n        // The backend should return the new GCS URL or confirm success\n        const data = await response.json();\n        // Update the audio URL to the new one\n        setAudioUrl(data.url || 'https://storage.googleapis.com/marcosargiottitask/audio-buffer.mp3');\n        alert('Audio has been processed and updated.');\n      } else {\n        console.error('Failed to process audio');\n        alert('Failed to process audio');\n      }\n    } catch (error) {\n      console.error('Error processing audio:', error);\n      alert('Error processing audio');\n    }\n    setLoading(false);\n  };\n\n  // Function to refresh the audio URL manually\n  const reprocessAudio = () => {\n    const updatedGcsAudioUrl = 'https://storage.googleapis.com/marcosargiottitask/audio-buffer.mp3';\n    setAudioUrl(updatedGcsAudioUrl);\n    console.log(\"The audio URL was refreshed\");\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex flex-col items-center justify-center mt-8\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: url,\n        onChange: e => setUrl(e.target.value),\n        placeholder: \"Enter Video URL\",\n        className: \"text-input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleAudioExtraction,\n        disabled: loading,\n        className: \"border-2 border-black py-2 px-3 m-2 roboto-medium rounded-md bg-white tracking-wider\",\n        children: loading ? 'Processing...' : 'Process Audio'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), audioUrl && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex flex-col items-center justify-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"audio\", {\n          controls: true,\n          src: audioUrl,\n          children: \"Your browser does not support the audio element.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: reprocessAudio,\n          className: \"border-2 border-black py-2 px-3 m-2 roboto-medium rounded-md bg-white tracking-wider\",\n          children: \"Reprocess/Refresh Audio\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-white text-center\",\n      children: \"To download the audio clip press on the options button of the player\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(AudioPlayer, \"cCTLWQnHhoJrKWPYo4Za4BBAHYs=\");\n_c = AudioPlayer;\nexport default AudioPlayer;\nvar _c;\n$RefreshReg$(_c, \"AudioPlayer\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","AudioPlayer","_s","audioUrl","setAudioUrl","loading","setLoading","url","setUrl","initialGcsAudioUrl","handleAudioExtraction","response","fetch","encodeURIComponent","ok","data","json","alert","console","error","reprocessAudio","updatedGcsAudioUrl","log","children","className","type","value","onChange","e","target","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","controls","src","_c","$RefreshReg$"],"sources":["C:/Users/sargi/Desktop/Task/TaskRepo/ClientRepo/src/Components/AudioPlayer.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nfunction AudioPlayer() {\r\n  const [audioUrl, setAudioUrl] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n  const [url, setUrl] = useState(''); // This will be the video URL input by the user.\r\n\r\n  useEffect(() => {\r\n    // Initially, set the audio URL to the GCS file location\r\n    const initialGcsAudioUrl = 'https://storage.googleapis.com/marcosargiottitask/audio-buffer.mp3';\r\n    setAudioUrl(initialGcsAudioUrl);\r\n  }, []);\r\n\r\n  const handleAudioExtraction = async () => {\r\n    setLoading(true);\r\n    try {\r\n      // Assuming you have an input field where users set the `url` state\r\n      const response = await fetch(`http://localhost:3001/video/audio?url=${encodeURIComponent(url)}`);\r\n      if (response.ok) {\r\n        // If the backend successfully processes the audio, update the URL to reflect the change\r\n        // The backend should return the new GCS URL or confirm success\r\n        const data = await response.json();\r\n        // Update the audio URL to the new one\r\n        setAudioUrl(data.url || 'https://storage.googleapis.com/marcosargiottitask/audio-buffer.mp3');\r\n        alert('Audio has been processed and updated.');\r\n      } else {\r\n        console.error('Failed to process audio');\r\n        alert('Failed to process audio');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error processing audio:', error);\r\n      alert('Error processing audio');\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  // Function to refresh the audio URL manually\r\n  const reprocessAudio = () => {\r\n    const updatedGcsAudioUrl = 'https://storage.googleapis.com/marcosargiottitask/audio-buffer.mp3';\r\n    setAudioUrl(updatedGcsAudioUrl);\r\n    console.log(\"The audio URL was refreshed\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"flex flex-col items-center justify-center mt-8\">\r\n        <input\r\n          type=\"text\"\r\n          value={url}\r\n          onChange={(e) => setUrl(e.target.value)}\r\n          placeholder=\"Enter Video URL\"\r\n          className=\"text-input\"\r\n        />\r\n        <button onClick={handleAudioExtraction} disabled={loading} className=\"border-2 border-black py-2 px-3 m-2 roboto-medium rounded-md bg-white tracking-wider\">\r\n          {loading ? 'Processing...' : 'Process Audio'}\r\n        </button>\r\n        {audioUrl && (\r\n          <div className=\"flex flex-col items-center justify-center\">\r\n            <audio controls src={audioUrl}>\r\n              Your browser does not support the audio element.\r\n            </audio>\r\n            <button onClick={reprocessAudio} className=\"border-2 border-black py-2 px-3 m-2 roboto-medium rounded-md bg-white tracking-wider\">\r\n              Reprocess/Refresh Audio\r\n            </button>\r\n          </div>\r\n        )}\r\n      </div>\r\n      <p className='text-white text-center'>To download the audio clip press on the options button of the player</p>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default AudioPlayer;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}