{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sargi\\\\Desktop\\\\Task\\\\TaskRepo\\\\ClientRepo\\\\src\\\\Components\\\\TranslationContainer.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TranslationContainer() {\n  _s();\n  const [transcription, setTranscription] = useState('');\n  const [translation, setTranslation] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const handleAudioProcessing = async () => {\n    setIsLoading(true);\n    try {\n      // Assuming you're sending a POST request to include additional data like target language.\n      // If not, you might want to switch to a GET request.\n      const response = await fetch('/processAudio', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          targetLanguage: 'es'\n        }) // Example: specifying Spanish as target language.\n      });\n      if (response.ok) {\n        const {\n          transcription,\n          translation\n        } = await response.json();\n        setTranscription(transcription);\n        setTranslation(translation);\n      } else {\n        console.error('Failed to process the audio.');\n        // Handle errors appropriately in your UI.\n      }\n    } catch (error) {\n      console.error('Error:', error);\n      // Handle errors appropriately in your UI.\n    }\n    setIsLoading(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleAudioProcessing,\n      disabled: isLoading,\n      children: isLoading ? 'Processing...' : 'Process Audio'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Transcription:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: transcription\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Translation:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: translation\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n}\n_s(TranslationContainer, \"TQonOUpqDWECuVO+x79KKmZsq7s=\");\n_c = TranslationContainer;\nexport default TranslationContainer;\nvar _c;\n$RefreshReg$(_c, \"TranslationContainer\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","TranslationContainer","_s","transcription","setTranscription","translation","setTranslation","isLoading","setIsLoading","handleAudioProcessing","response","fetch","method","headers","body","JSON","stringify","targetLanguage","ok","json","console","error","children","onClick","disabled","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/sargi/Desktop/Task/TaskRepo/ClientRepo/src/Components/TranslationContainer.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\nfunction TranslationContainer() {\r\n  const [transcription, setTranscription] = useState('');\r\n  const [translation, setTranslation] = useState('');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const handleAudioProcessing = async () => {\r\n    setIsLoading(true);\r\n    try {\r\n      // Assuming you're sending a POST request to include additional data like target language.\r\n      // If not, you might want to switch to a GET request.\r\n      const response = await fetch('/processAudio', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ targetLanguage: 'es' }), // Example: specifying Spanish as target language.\r\n      });\r\n      if (response.ok) {\r\n        const { transcription, translation } = await response.json();\r\n        setTranscription(transcription);\r\n        setTranslation(translation);\r\n      } else {\r\n        console.error('Failed to process the audio.');\r\n        // Handle errors appropriately in your UI.\r\n      }\r\n    } catch (error) {\r\n      console.error('Error:', error);\r\n      // Handle errors appropriately in your UI.\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={handleAudioProcessing} disabled={isLoading}>\r\n        {isLoading ? 'Processing...' : 'Process Audio'}\r\n      </button>\r\n      <div>\r\n        <h3>Transcription:</h3>\r\n        <p>{transcription}</p>\r\n        <h3>Translation:</h3>\r\n        <p>{translation}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TranslationContainer;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,SAASC,oBAAoBA,CAAA,EAAG;EAAAC,EAAA;EAC9B,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACO,WAAW,EAAEC,cAAc,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACS,SAAS,EAAEC,YAAY,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EAEjD,MAAMW,qBAAqB,GAAG,MAAAA,CAAA,KAAY;IACxCD,YAAY,CAAC,IAAI,CAAC;IAClB,IAAI;MACF;MACA;MACA,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,eAAe,EAAE;QAC5CC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEC,cAAc,EAAE;QAAK,CAAC,CAAC,CAAE;MAClD,CAAC,CAAC;MACF,IAAIP,QAAQ,CAACQ,EAAE,EAAE;QACf,MAAM;UAAEf,aAAa;UAAEE;QAAY,CAAC,GAAG,MAAMK,QAAQ,CAACS,IAAI,CAAC,CAAC;QAC5Df,gBAAgB,CAACD,aAAa,CAAC;QAC/BG,cAAc,CAACD,WAAW,CAAC;MAC7B,CAAC,MAAM;QACLe,OAAO,CAACC,KAAK,CAAC,8BAA8B,CAAC;QAC7C;MACF;IACF,CAAC,CAAC,OAAOA,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;MAC9B;IACF;IACAb,YAAY,CAAC,KAAK,CAAC;EACrB,CAAC;EAED,oBACER,OAAA;IAAAsB,QAAA,gBACEtB,OAAA;MAAQuB,OAAO,EAAEd,qBAAsB;MAACe,QAAQ,EAAEjB,SAAU;MAAAe,QAAA,EACzDf,SAAS,GAAG,eAAe,GAAG;IAAe;MAAAkB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxC,CAAC,eACT5B,OAAA;MAAAsB,QAAA,gBACEtB,OAAA;QAAAsB,QAAA,EAAI;MAAc;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACvB5B,OAAA;QAAAsB,QAAA,EAAInB;MAAa;QAAAsB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACtB5B,OAAA;QAAAsB,QAAA,EAAI;MAAY;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACrB5B,OAAA;QAAAsB,QAAA,EAAIjB;MAAW;QAAAoB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACjB,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAAC1B,EAAA,CA7CQD,oBAAoB;AAAA4B,EAAA,GAApB5B,oBAAoB;AA+C7B,eAAeA,oBAAoB;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}