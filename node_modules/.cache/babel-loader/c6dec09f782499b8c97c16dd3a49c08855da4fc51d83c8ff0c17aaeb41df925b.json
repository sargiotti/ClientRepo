{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sargi\\\\Desktop\\\\Task\\\\TaskRepo\\\\ClientRepo\\\\src\\\\Components\\\\AudioPlayer.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AudioPlayer() {\n  _s();\n  const [audioUrl, setAudioUrl] = useState('');\n  const [transcription, setTranscription] = useState('');\n  const [translation, setTranslation] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [url, setUrl] = useState('');\n  useEffect(() => {\n    const fetchStoredUrl = async () => {\n      const response = await fetch('http://localhost:3001/video');\n      if (response.ok) {\n        const data = await response.json();\n        if (data.url) {\n          setUrl(data.url);\n        }\n      }\n    };\n    fetchStoredUrl();\n  }, []);\n  const handleProcessAudio = async () => {\n    setLoading(true);\n    try {\n      // Here we assume the target language is hardcoded to 'es' for Spanish.\n      // You can modify this to allow dynamic language selection.\n      const postData = {\n        videoUrl: url,\n        targetLanguage: 'es'\n      };\n      const response = await fetch('http://localhost:3001/video/process', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(postData)\n      });\n      if (response.ok) {\n        const result = await response.json();\n        setTranscription(result.transcription);\n        setTranslation(result.translation);\n\n        // Assuming the server sends back the audio URL or blob\n        if (result.audioUrl) {\n          setAudioUrl(result.audioUrl);\n        } else if (result.audioBlob) {\n          const audioUrl = URL.createObjectURL(result.audioBlob);\n          setAudioUrl(audioUrl);\n        }\n      } else {\n        console.error('Failed to process audio');\n        alert('Failed to process audio');\n      }\n    } catch (error) {\n      console.error('Error processing audio:', error);\n      alert('Error processing audio');\n    }\n    setLoading(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col items-center justify-center mt-8\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"p-3 m-3 bg-white border-2 border-black rounded-md\",\n      onClick: handleProcessAudio,\n      disabled: loading,\n      children: loading ? 'Processing...' : 'Process Audio'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), audioUrl && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex flex-col items-center justify-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"audio\", {\n        controls: true,\n        src: audioUrl,\n        children: \"Your browser does not support the audio element.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n        href: audioUrl,\n        download: \"clip.mp3\",\n        className: \"p-3 m-3 bg-white border-2 border-black rounded-md\",\n        children: \"Download Audio\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this), transcription && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Transcription: \", transcription]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 29\n      }, this), translation && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Translation: \", translation]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 27\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n}\n_s(AudioPlayer, \"ijc2yTi/pLE49AilmCri0j6J6Fc=\");\n_c = AudioPlayer;\nexport default AudioPlayer;\nvar _c;\n$RefreshReg$(_c, \"AudioPlayer\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","AudioPlayer","_s","audioUrl","setAudioUrl","transcription","setTranscription","translation","setTranslation","loading","setLoading","url","setUrl","fetchStoredUrl","response","fetch","ok","data","json","handleProcessAudio","postData","videoUrl","targetLanguage","method","headers","body","JSON","stringify","result","audioBlob","URL","createObjectURL","console","error","alert","className","children","onClick","disabled","fileName","_jsxFileName","lineNumber","columnNumber","controls","src","href","download","_c","$RefreshReg$"],"sources":["C:/Users/sargi/Desktop/Task/TaskRepo/ClientRepo/src/Components/AudioPlayer.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nfunction AudioPlayer() {\r\n  const [audioUrl, setAudioUrl] = useState('');\r\n  const [transcription, setTranscription] = useState('');\r\n  const [translation, setTranslation] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n  const [url, setUrl] = useState('');\r\n\r\n  useEffect(() => {\r\n    const fetchStoredUrl = async () => {\r\n      const response = await fetch('http://localhost:3001/video');\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        if (data.url) {\r\n          setUrl(data.url);\r\n        }\r\n      }\r\n    };\r\n\r\n    fetchStoredUrl();\r\n  }, []);\r\n\r\n  const handleProcessAudio = async () => {\r\n    setLoading(true);\r\n    try {\r\n      // Here we assume the target language is hardcoded to 'es' for Spanish.\r\n      // You can modify this to allow dynamic language selection.\r\n      const postData = { videoUrl: url, targetLanguage: 'es' };\r\n      const response = await fetch('http://localhost:3001/video/process', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(postData),\r\n      });\r\n\r\n      if (response.ok) {\r\n        const result = await response.json();\r\n        setTranscription(result.transcription);\r\n        setTranslation(result.translation);\r\n\r\n        // Assuming the server sends back the audio URL or blob\r\n        if (result.audioUrl) {\r\n          setAudioUrl(result.audioUrl);\r\n        } else if (result.audioBlob) {\r\n          const audioUrl = URL.createObjectURL(result.audioBlob);\r\n          setAudioUrl(audioUrl);\r\n        }\r\n      } else {\r\n        console.error('Failed to process audio');\r\n        alert('Failed to process audio');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error processing audio:', error);\r\n      alert('Error processing audio');\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  return (\r\n    <div className='flex flex-col items-center justify-center mt-8'>\r\n      <button className='p-3 m-3 bg-white border-2 border-black rounded-md' onClick={handleProcessAudio} disabled={loading}>\r\n        {loading ? 'Processing...' : 'Process Audio'}\r\n      </button>\r\n      {audioUrl && (\r\n        <div className='flex flex-col items-center justify-center'>\r\n          <audio controls src={audioUrl}>\r\n            Your browser does not support the audio element.\r\n          </audio>\r\n          <a href={audioUrl} download=\"clip.mp3\" className=\"p-3 m-3 bg-white border-2 border-black rounded-md\">\r\n            Download Audio\r\n          </a>\r\n          {transcription && <p>Transcription: {transcription}</p>}\r\n          {translation && <p>Translation: {translation}</p>}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AudioPlayer;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,SAASC,WAAWA,CAAA,EAAG;EAAAC,EAAA;EACrB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACQ,aAAa,EAAEC,gBAAgB,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACU,WAAW,EAAEC,cAAc,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACY,OAAO,EAAEC,UAAU,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACc,GAAG,EAAEC,MAAM,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EAElCC,SAAS,CAAC,MAAM;IACd,MAAMe,cAAc,GAAG,MAAAA,CAAA,KAAY;MACjC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,6BAA6B,CAAC;MAC3D,IAAID,QAAQ,CAACE,EAAE,EAAE;QACf,MAAMC,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;QAClC,IAAID,IAAI,CAACN,GAAG,EAAE;UACZC,MAAM,CAACK,IAAI,CAACN,GAAG,CAAC;QAClB;MACF;IACF,CAAC;IAEDE,cAAc,CAAC,CAAC;EAClB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMM,kBAAkB,GAAG,MAAAA,CAAA,KAAY;IACrCT,UAAU,CAAC,IAAI,CAAC;IAChB,IAAI;MACF;MACA;MACA,MAAMU,QAAQ,GAAG;QAAEC,QAAQ,EAAEV,GAAG;QAAEW,cAAc,EAAE;MAAK,CAAC;MACxD,MAAMR,QAAQ,GAAG,MAAMC,KAAK,CAAC,qCAAqC,EAAE;QAClEQ,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACP,QAAQ;MAC/B,CAAC,CAAC;MAEF,IAAIN,QAAQ,CAACE,EAAE,EAAE;QACf,MAAMY,MAAM,GAAG,MAAMd,QAAQ,CAACI,IAAI,CAAC,CAAC;QACpCZ,gBAAgB,CAACsB,MAAM,CAACvB,aAAa,CAAC;QACtCG,cAAc,CAACoB,MAAM,CAACrB,WAAW,CAAC;;QAElC;QACA,IAAIqB,MAAM,CAACzB,QAAQ,EAAE;UACnBC,WAAW,CAACwB,MAAM,CAACzB,QAAQ,CAAC;QAC9B,CAAC,MAAM,IAAIyB,MAAM,CAACC,SAAS,EAAE;UAC3B,MAAM1B,QAAQ,GAAG2B,GAAG,CAACC,eAAe,CAACH,MAAM,CAACC,SAAS,CAAC;UACtDzB,WAAW,CAACD,QAAQ,CAAC;QACvB;MACF,CAAC,MAAM;QACL6B,OAAO,CAACC,KAAK,CAAC,yBAAyB,CAAC;QACxCC,KAAK,CAAC,yBAAyB,CAAC;MAClC;IACF,CAAC,CAAC,OAAOD,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MAC/CC,KAAK,CAAC,wBAAwB,CAAC;IACjC;IACAxB,UAAU,CAAC,KAAK,CAAC;EACnB,CAAC;EAED,oBACEV,OAAA;IAAKmC,SAAS,EAAC,gDAAgD;IAAAC,QAAA,gBAC7DpC,OAAA;MAAQmC,SAAS,EAAC,mDAAmD;MAACE,OAAO,EAAElB,kBAAmB;MAACmB,QAAQ,EAAE7B,OAAQ;MAAA2B,QAAA,EAClH3B,OAAO,GAAG,eAAe,GAAG;IAAe;MAAA8B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtC,CAAC,EACRvC,QAAQ,iBACPH,OAAA;MAAKmC,SAAS,EAAC,2CAA2C;MAAAC,QAAA,gBACxDpC,OAAA;QAAO2C,QAAQ;QAACC,GAAG,EAAEzC,QAAS;QAAAiC,QAAA,EAAC;MAE/B;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eACR1C,OAAA;QAAG6C,IAAI,EAAE1C,QAAS;QAAC2C,QAAQ,EAAC,UAAU;QAACX,SAAS,EAAC,mDAAmD;QAAAC,QAAA,EAAC;MAErG;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,EACHrC,aAAa,iBAAIL,OAAA;QAAAoC,QAAA,GAAG,iBAAe,EAAC/B,aAAa;MAAA;QAAAkC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,EACtDnC,WAAW,iBAAIP,OAAA;QAAAoC,QAAA,GAAG,eAAa,EAAC7B,WAAW;MAAA;QAAAgC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9C,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAACxC,EAAA,CA7EQD,WAAW;AAAA8C,EAAA,GAAX9C,WAAW;AA+EpB,eAAeA,WAAW;AAAC,IAAA8C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}