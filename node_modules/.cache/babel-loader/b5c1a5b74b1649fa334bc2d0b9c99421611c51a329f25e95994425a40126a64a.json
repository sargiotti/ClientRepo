{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sargi\\\\Desktop\\\\Task\\\\TaskRepo\\\\ClientRepo\\\\src\\\\Components\\\\FirstFrame.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction FirstFrame() {\n  _s();\n  const [frameUrl, setFrameUrl] = useState('');\n  const [ocrResults, setOcrResults] = useState([]);\n  const [videoUrl, setVideoUrl] = useState('');\n  useEffect(() => {\n    const fetchStoredUrl = async () => {\n      const response = await fetch('http://localhost:3001/video');\n      if (response.ok) {\n        const data = await response.json();\n        setVideoUrl(data.url);\n      }\n    };\n    fetchStoredUrl();\n  }, []);\n  const handleFetchFirstFrame = async url => {\n    const response = await fetch(`/video/first-frame?url=${encodeURIComponent(url)}`);\n    if (response.ok) {\n      const blob = await response.blob();\n      const url = URL.createObjectURL(blob);\n      setFrameUrl(url);\n    } else {\n      alert('Failed to fetch the first frame.');\n    }\n  };\n  const performOCR = async () => {\n    if (!frameUrl) {\n      alert('No image to perform OCR on.');\n      return;\n    }\n    const response = await fetch('/performOCR', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        imageUri: frameUrl\n      })\n    });\n    if (response.ok) {\n      const data = await response.json();\n      setOcrResults(data);\n    } else {\n      alert('Failed to perform OCR.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col items-center justify-center mt-12\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"border-2 border-black py-2 px-3 m-2 roboto-medium rounded-md bg-white tracking-wider\",\n      onClick: () => handleFetchFirstFrame(videoUrl),\n      children: \"Get first frame as an image\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), frameUrl && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"w-1/4\",\n        src: frameUrl,\n        alt: \"First frame of the video\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n        className: \"border-2 border-black py-1 px-2 m-2 roboto-medium rounded-md bg-white tracking-wider\",\n        href: frameUrl,\n        download: \"first-frame.jpg\",\n        children: \"Download First Frame .jpg\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"border-2 border-black py-1 px-2 m-2 roboto-medium rounded-md bg-white tracking-wider\",\n        onClick: performOCR,\n        children: \"Perform OCR\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), ocrResults.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"OCR Results:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this), ocrResults.map((result, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n        children: result.description\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 13\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n}\n_s(FirstFrame, \"WktXiOAqadQnqLOo4hcpinoDjDw=\");\n_c = FirstFrame;\nexport default FirstFrame;\nvar _c;\n$RefreshReg$(_c, \"FirstFrame\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","FirstFrame","_s","frameUrl","setFrameUrl","ocrResults","setOcrResults","videoUrl","setVideoUrl","fetchStoredUrl","response","fetch","ok","data","json","url","handleFetchFirstFrame","encodeURIComponent","blob","URL","createObjectURL","alert","performOCR","method","headers","body","JSON","stringify","imageUri","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","href","download","length","map","result","index","description","_c","$RefreshReg$"],"sources":["C:/Users/sargi/Desktop/Task/TaskRepo/ClientRepo/src/Components/FirstFrame.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nfunction FirstFrame() {\r\n  const [frameUrl, setFrameUrl] = useState('');\r\n  const [ocrResults, setOcrResults] = useState([]);\r\n  const [videoUrl, setVideoUrl] = useState('');\r\n\r\n  useEffect(() => {\r\n    const fetchStoredUrl = async () => {\r\n      const response = await fetch('http://localhost:3001/video');\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        setVideoUrl(data.url);\r\n      }\r\n    };\r\n\r\n    fetchStoredUrl();\r\n  }, []);\r\n\r\n  const handleFetchFirstFrame = async (url) => {\r\n    const response = await fetch(`/video/first-frame?url=${encodeURIComponent(url)}`);\r\n    if (response.ok) {\r\n      const blob = await response.blob();\r\n      const url = URL.createObjectURL(blob);\r\n      setFrameUrl(url);\r\n    } else {\r\n      alert('Failed to fetch the first frame.');\r\n    }\r\n  };\r\n\r\n  const performOCR = async () => {\r\n    if (!frameUrl) {\r\n      alert('No image to perform OCR on.');\r\n      return;\r\n    }\r\n\r\n    const response = await fetch('/performOCR', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ imageUri: frameUrl }),\r\n    });\r\n\r\n    if (response.ok) {\r\n      const data = await response.json();\r\n      setOcrResults(data);\r\n    } else {\r\n      alert('Failed to perform OCR.');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className='flex flex-col items-center justify-center mt-12'>\r\n      <button className='border-2 border-black py-2 px-3 m-2 roboto-medium rounded-md bg-white tracking-wider' onClick={() => handleFetchFirstFrame(videoUrl)}>Get first frame as an image</button>\r\n      {frameUrl && (\r\n        <>\r\n          <img className='w-1/4' src={frameUrl} alt=\"First frame of the video\" />\r\n          <a className='border-2 border-black py-1 px-2 m-2 roboto-medium rounded-md bg-white tracking-wider' href={frameUrl} download=\"first-frame.jpg\">Download First Frame .jpg</a>\r\n          <button className='border-2 border-black py-1 px-2 m-2 roboto-medium rounded-md bg-white tracking-wider' onClick={performOCR}>Perform OCR</button>\r\n        </>\r\n      )}\r\n      {ocrResults.length > 0 && (\r\n        <div>\r\n          <h3>OCR Results:</h3>\r\n          {ocrResults.map((result, index) => (\r\n            <p key={index}>{result.description}</p>\r\n          ))}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FirstFrame;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}