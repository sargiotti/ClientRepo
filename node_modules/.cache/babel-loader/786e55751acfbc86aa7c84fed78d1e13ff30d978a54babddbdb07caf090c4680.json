{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sargi\\\\Desktop\\\\Task\\\\TaskRepo\\\\ClientRepo\\\\src\\\\Components\\\\FirstFrame.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction FirstFrameAndOCR() {\n  _s();\n  const [frameUrl, setFrameUrl] = useState('');\n  const [ocrResults, setOcrResults] = useState([]);\n  const [videoUrl, setVideoUrl] = useState('');\n  useEffect(() => {\n    async function fetchStoredUrl() {\n      const response = await fetch('http://localhost:3001/video');\n      if (response.ok) {\n        const data = await response.json();\n        setVideoUrl(data.url);\n      }\n    }\n    fetchStoredUrl();\n  }, []);\n  const handleFetchFirstFrameAndOCR = async url => {\n    const response = await fetch(`/video/first-frame-and-ocr?url=${encodeURIComponent(url)}`);\n    if (response.ok) {\n      const data = await response.json();\n      setFrameUrl(data.frameUrl);\n      setOcrResults(data.descriptions);\n    } else {\n      alert('Failed to fetch the first frame or perform OCR.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col items-center justify-center mt-12\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"border-2 border-black py-2 px-3 m-2 roboto-medium rounded-md bg-white tracking-wider\",\n      onClick: () => handleFetchFirstFrameAndOCR(videoUrl),\n      children: \"Get First Frame and Perform OCR\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), frameUrl && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"w-1/4\",\n        src: frameUrl,\n        alt: \"First frame of the video\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n        className: \"border-2 border-black py-1 px-2 m-2 roboto-medium rounded-md bg-white tracking-wider\",\n        href: frameUrl,\n        download: \"first-frame.jpg\",\n        children: \"Download First Frame\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), ocrResults.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"OCR Results:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 11\n      }, this), ocrResults.map((result, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n        children: result.description\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 13\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n}\n_s(FirstFrameAndOCR, \"WktXiOAqadQnqLOo4hcpinoDjDw=\");\n_c = FirstFrameAndOCR;\nexport default FirstFrameAndOCR;\nvar _c;\n$RefreshReg$(_c, \"FirstFrameAndOCR\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","FirstFrameAndOCR","_s","frameUrl","setFrameUrl","ocrResults","setOcrResults","videoUrl","setVideoUrl","fetchStoredUrl","response","fetch","ok","data","json","url","handleFetchFirstFrameAndOCR","encodeURIComponent","descriptions","alert","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","href","download","length","map","result","index","description","_c","$RefreshReg$"],"sources":["C:/Users/sargi/Desktop/Task/TaskRepo/ClientRepo/src/Components/FirstFrame.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nfunction FirstFrameAndOCR() {\r\n  const [frameUrl, setFrameUrl] = useState('');\r\n  const [ocrResults, setOcrResults] = useState([]);\r\n  const [videoUrl, setVideoUrl] = useState('');\r\n\r\n  useEffect(() => {\r\n    async function fetchStoredUrl() {\r\n      const response = await fetch('http://localhost:3001/video');\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        setVideoUrl(data.url);\r\n      }\r\n    }\r\n\r\n    fetchStoredUrl();\r\n  }, []);\r\n\r\n  const handleFetchFirstFrameAndOCR = async (url) => {\r\n    const response = await fetch(`/video/first-frame-and-ocr?url=${encodeURIComponent(url)}`);\r\n    if (response.ok) {\r\n      const data = await response.json();\r\n      setFrameUrl(data.frameUrl);\r\n      setOcrResults(data.descriptions);\r\n    } else {\r\n      alert('Failed to fetch the first frame or perform OCR.');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className='flex flex-col items-center justify-center mt-12'>\r\n      <button className='border-2 border-black py-2 px-3 m-2 roboto-medium rounded-md bg-white tracking-wider' onClick={() => handleFetchFirstFrameAndOCR(videoUrl)}>Get First Frame and Perform OCR</button>\r\n      {frameUrl && (\r\n        <>\r\n          <img className='w-1/4' src={frameUrl} alt=\"First frame of the video\" />\r\n          <a className='border-2 border-black py-1 px-2 m-2 roboto-medium rounded-md bg-white tracking-wider' href={frameUrl} download=\"first-frame.jpg\">Download First Frame</a>\r\n        </>\r\n      )}\r\n      {ocrResults.length > 0 && (\r\n        <div>\r\n          <h3>OCR Results:</h3>\r\n          {ocrResults.map((result, index) => (\r\n            <p key={index}>{result.description}</p>\r\n          ))}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FirstFrameAndOCR;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}