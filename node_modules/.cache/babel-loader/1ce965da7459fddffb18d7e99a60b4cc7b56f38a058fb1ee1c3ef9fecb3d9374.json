{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sargi\\\\Desktop\\\\Task\\\\TaskRepo\\\\ClientRepo\\\\src\\\\Components\\\\OCRResults.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction OCRResults() {\n  _s();\n  const [ocrText, setOcrText] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const handlePerformOCR = async () => {\n    setIsLoading(true);\n    try {\n      const response = await fetch('/performOCR');\n      if (response.ok) {\n        const data = await response.json();\n        setOcrText(data.text);\n        setIsLoading(false);\n      } else {\n        alert('Failed to perform OCR.');\n        setIsLoading(false);\n      }\n    } catch (error) {\n      console.error('Error performing OCR:', error);\n      alert('Error occurred while performing OCR.');\n      setIsLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mt-8\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"border-2 border-black py-2 px-3 m-2 roboto-medium rounded-md bg-white tracking-wider\",\n      onClick: handlePerformOCR,\n      disabled: isLoading,\n      children: isLoading ? 'Processing...' : 'Perform OCR'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), ocrText && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"OCR Result:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: ocrText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n}\n_s(OCRResults, \"hzLpf1dRryMBZbzq570lijl9zHk=\");\n_c = OCRResults;\nexport default OCRResults;\nvar _c;\n$RefreshReg$(_c, \"OCRResults\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","OCRResults","_s","ocrText","setOcrText","isLoading","setIsLoading","handlePerformOCR","response","fetch","ok","data","json","text","alert","error","console","className","children","onClick","disabled","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/sargi/Desktop/Task/TaskRepo/ClientRepo/src/Components/OCRResults.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\nfunction OCRResults() {\r\n  const [ocrText, setOcrText] = useState('');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const handlePerformOCR = async () => {\r\n    setIsLoading(true);\r\n    try {\r\n      const response = await fetch('/performOCR');\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        setOcrText(data.text);\r\n        setIsLoading(false);\r\n      } else {\r\n        alert('Failed to perform OCR.');\r\n        setIsLoading(false);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error performing OCR:', error);\r\n      alert('Error occurred while performing OCR.');\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className='mt-8'>\r\n      <button \r\n        className='border-2 border-black py-2 px-3 m-2 roboto-medium rounded-md bg-white tracking-wider'\r\n        onClick={handlePerformOCR}\r\n        disabled={isLoading}\r\n      >\r\n        {isLoading ? 'Processing...' : 'Perform OCR'}\r\n      </button>\r\n\r\n      {ocrText && (\r\n        <div>\r\n          <h3>OCR Result:</h3>\r\n          <p>{ocrText}</p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default OCRResults;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACpB,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACO,SAAS,EAAEC,YAAY,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;EAEjD,MAAMS,gBAAgB,GAAG,MAAAA,CAAA,KAAY;IACnCD,YAAY,CAAC,IAAI,CAAC;IAClB,IAAI;MACF,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,aAAa,CAAC;MAC3C,IAAID,QAAQ,CAACE,EAAE,EAAE;QACf,MAAMC,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;QAClCR,UAAU,CAACO,IAAI,CAACE,IAAI,CAAC;QACrBP,YAAY,CAAC,KAAK,CAAC;MACrB,CAAC,MAAM;QACLQ,KAAK,CAAC,wBAAwB,CAAC;QAC/BR,YAAY,CAAC,KAAK,CAAC;MACrB;IACF,CAAC,CAAC,OAAOS,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7CD,KAAK,CAAC,sCAAsC,CAAC;MAC7CR,YAAY,CAAC,KAAK,CAAC;IACrB;EACF,CAAC;EAED,oBACEN,OAAA;IAAKiB,SAAS,EAAC,MAAM;IAAAC,QAAA,gBACnBlB,OAAA;MACEiB,SAAS,EAAC,sFAAsF;MAChGE,OAAO,EAAEZ,gBAAiB;MAC1Ba,QAAQ,EAAEf,SAAU;MAAAa,QAAA,EAEnBb,SAAS,GAAG,eAAe,GAAG;IAAa;MAAAgB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtC,CAAC,EAERrB,OAAO,iBACNH,OAAA;MAAAkB,QAAA,gBACElB,OAAA;QAAAkB,QAAA,EAAI;MAAW;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACpBxB,OAAA;QAAAkB,QAAA,EAAIf;MAAO;QAAAkB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACb,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAACtB,EAAA,CAzCQD,UAAU;AAAAwB,EAAA,GAAVxB,UAAU;AA2CnB,eAAeA,UAAU;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}